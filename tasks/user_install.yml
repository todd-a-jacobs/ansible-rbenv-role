---
- name: checkout rbenv_repo for selected users
  git:
    repo: '{{ rbenv_repo }}'
    dest: '{{ rbenv_root }}'
    version: '{{ rbenv.version }}'
    accept_hostkey: yes
    force: yes
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"

- name: create plugins directory for selected users
  file:
    state: directory
    path: '{{ rbenv_root }}/plugins'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"

- name: install plugins for selected users
  git:
    repo: '{{ item[1].repo }}'
    dest: '{{ rbenv_root }}/plugins/{{ item[1].name }}'
    version: '{{ item[1].version }}'
    accept_hostkey: yes
    force: yes
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv_plugins }}"
  become: yes
  become_user: "{{ item[0] }}"

- name: add rbenv initialization to profile system-wide
  template:
    src: rbenv_user.sh.j2
    dest: /etc/profile.d/rbenv.sh
    owner: root
    group: root
    mode: 0755
  become: yes
  when:
    - (ansible_os_family != 'OpenBSD' and ansible_os_family != 'Darwin') and rbenv_user_profile

- name: add rbenv initialization to profile system-wide
  blockinfile:
    block: "{{ lookup('template', 'rbenv_user.sh.j2') }}"
    dest: /etc/profile
  become: yes
  when:
    - ansible_os_family == 'Darwin' and rbenv_user_profile

- name: set default-gems for select users
  copy:
    src: default-gems
    dest: '{{ rbenv_root }}/default-gems'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - default_gems_file is not defined

- name: set custom default-gems for select users
  copy:
    src: '{{ default_gems_file }}'
    dest: '{{ rbenv_root }}/default-gems'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - default_gems_file is defined

- name: set gemrc for select users
  copy:
    src: gemrc
    dest: ~/.gemrc
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"

- name: set vars for select users
  copy:
    src: vars
    dest: '{{ rbenv_root }}/vars'
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - rbenv_set_vars | bool

- name: check ruby versions installed for select users
  shell: $0 -lc "{{ rbenv_root }}/bin/rbenv versions --bare"
  with_items: "{{ rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  register: rbenv_versions
  changed_when: false
  failed_when: false
  check_mode: no

- name: install specified ruby versions for select users
  shell: $0 -lc "{{ rbenv_root }}/bin/rbenv install --skip-existing {{ item.1.version }}"
  become: yes
  args:
    creates: "~/.rbenv/versions/{{ item.1.version }}"
  become_user: "{{ item.0 }}"
  with_nested:
    - "{{ rbenv_users }}"
    - "{{ rbenv.rubies }}"
  loop_control:
    label: Install {{ item.1.version }} for {{ item.0 }}
  environment: "{{ item[1].env | default({}) | combine({ 'TMPDIR': rbenv_tmpdir }) }}"

- name: check which ruby versions to remove 
  set_fact:
    drop_user: "{{ item.item }}"
    drop_ruby: "{{ item.stdout_lines|list|difference(rbenv.rubies|map(attribute='version')|list) }}"
  become: yes
  become_user: "{{ item.item }}"
  with_items: "{{ rbenv_versions.results }}"
  when:
    - rbenv_clean_up | bool
    - item.stdout_lines|list != rbenv.rubies|map(attribute='version')|list
  register: removable_rubies

- name: uninstall old ruby versions
  shell: $0 -lc "{{ rbenv_root }}/bin/rbenv uninstall -f {{ rbenv_root }}/versions/{{ item.1 }}"
  args:
    removes: "~/.rbenv/versions/{{ item.1 }}"
  become: yes
  become_user: "{{ item.0.ansible_facts.drop_user }}"
  with_subelements:
    - "{{ removable_rubies.results }}"
    - ansible_facts.drop_ruby
  loop_control:
    label: Remove {{ item.1 }} for {{ item.0.ansible_facts.drop_user }}
  when:
    - rbenv_clean_up | bool

- name: check if user ruby version is {{ rbenv.default_ruby }}
  shell: $0 -lc "{{ rbenv_root }}/bin/rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ rbenv.default_ruby }}'"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ rbenv_users }}"
  register: ruby_selected
  changed_when: false
  failed_when: false
  check_mode: no

- name: set ruby {{ rbenv.default_ruby }} for select users
  shell: $0 -lc "{{ rbenv_root }}/bin/rbenv global {{ rbenv.default_ruby }} && {{ rbenv_root }}/bin/rbenv rehash"
  become: yes
  become_user: "{{ item[1] }}"
  with_together:
    - "{{ ruby_selected.results }}"
    - "{{ rbenv_users }}"
  when:
    - item[0].rc != 0
